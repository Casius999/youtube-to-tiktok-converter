"""Module d'optimisation pour la viralit√©.

Ce module est responsable de l'optimisation des vid√©os pour maximiser
leur potentiel viral sur TikTok, incluant les effets visuels, les hashtags
et les m√©tadonn√©es.
"""

import os
import json
import random
from pathlib import Path
from typing import Dict, List, Tuple, Any

import ffmpeg
import numpy as np
from loguru import logger
from moviepy.editor import VideoFileClip, TextClip, CompositeVideoClip, vfx

from src.utils.config import Config


class ViralOptimizer:
    """Classe pour optimiser les vid√©os pour la viralit√© sur TikTok."""
    
    def __init__(self, config: Config):
        """Initialise l'optimiseur viral avec la configuration.
        
        Args:
            config: Configuration de l'application
        """
        self.config = config
        self.process_id = config.process_id
        
        # Pr√©paration des ressources pour l'optimisation
        self.trending_hashtags = self._load_trending_hashtags()
        self.effect_templates = self._load_effect_templates()
    
    def _load_trending_hashtags(self) -> List[str]:
        """Charge les hashtags tendance pour TikTok.
        
        Returns:
            Liste des hashtags populaires
        """
        # Dans une impl√©mentation r√©elle, ces hashtags seraient r√©cup√©r√©s via une API
        # Simulation pour l'exemple
        return [
            "fyp", "foryoupage", "viral", "trending", "tiktok", "viralvideo",
            "foryou", "explore", "trending", "comedy", "funny", "meme", "challenge",
            "dance", "music", "song", "duet", "xyzbca", "tiktokviral", "trend",
            "trendingnow", "viraltrend", "creative", "transformation", "satisfying",
            "aesthetic", "relaxing", "motivation", "inspiration", "lifehack"
        ]
    
    def _load_effect_templates(self) -> List[Dict[str, Any]]:
        """Charge les templates d'effets viraux pour TikTok.
        
        Returns:
            Liste des templates d'effets disponibles
        """
        # Dans une impl√©mentation r√©elle, ces effets seraient charg√©s depuis une base de donn√©es
        # Simulation pour l'exemple
        return [
            {
                "name": "trending_overlay",
                "type": "text",
                "text": "WATCH TILL THE END üî•",
                "position": "top",
                "duration": 3.0,
                "color": "white",
                "font_size": 40
            },
            {
                "name": "caption_overlay",
                "type": "text",
                "text": "POV: When you finally see it...",
                "position": "bottom",
                "duration": 4.0,
                "color": "white",
                "font_size": 36
            },
            {
                "name": "zoom_effect",
                "type": "zoom",
                "start_time": 0.3,
                "duration": 1.0,
                "zoom_factor": 1.2
            },
            {
                "name": "flash_effect",
                "type": "flash",
                "start_time": 0.5,
                "duration": 0.2,
                "intensity": 0.5
            },
            {
                "name": "shake_effect",
                "type": "shake",
                "start_time": 1.0,
                "duration": 0.5,
                "intensity": 5.0
            }
        ]
    
    def optimize(self, input_path: str, video_info: Dict[str, Any]) -> Tuple[str, Dict[str, Any]]:
        """Optimise une vid√©o pour maximiser sa viralit√© sur TikTok.
        
        Args:
            input_path: Chemin vers la vid√©o √† optimiser
            video_info: Informations sur la vid√©o d'origine
            
        Returns:
            Tuple contenant (chemin_vid√©o_optimis√©e, m√©tadonn√©es)
        """
        logger.info(f"Optimisation pour la viralit√©: {input_path}")
        
        # 1. Cr√©ation des m√©tadonn√©es virales (titre, description, hashtags)
        metadata = self._generate_viral_metadata(video_info)
        
        # 2. Application des effets viraux √† la vid√©o
        optimized_path = self._apply_viral_effects(input_path, metadata)
        
        # 3. Finalisation et validation des optimisations
        final_metadata = self._finalize_optimization(optimized_path, metadata)
        
        # Sauvegarde des m√©tadonn√©es dans un fichier JSON
        metadata_path = self.config.get_output_file_path("metadata.json")
        with open(metadata_path, 'w') as f:
            json.dump(final_metadata, f, indent=2)
        
        logger.info(f"Optimisation termin√©e: {optimized_path}")
        return optimized_path, final_metadata
    
    def _generate_viral_metadata(self, video_info: Dict[str, Any]) -> Dict[str, Any]:
        """G√©n√®re des m√©tadonn√©es optimis√©es pour la viralit√©.
        
        Args:
            video_info: Informations sur la vid√©o d'origine
            
        Returns:
            M√©tadonn√©es optimis√©es pour TikTok
        """
        logger.info("G√©n√©ration des m√©tadonn√©es virales")
        
        # Extraction des informations pertinentes de la vid√©o d'origine
        original_title = video_info.get("title", "")
        original_keywords = video_info.get("keywords", [])
        original_description = video_info.get("description", "")
        
        # Extraction de mots-cl√©s pertinents du titre et de la description
        relevant_words = self._extract_relevant_words(
            original_title + " " + original_description
        )
        
        # G√©n√©ration d'un titre accrocheur pour TikTok
        title_templates = [
            "üò± You won't believe what happens when {}",
            "This is why {} will blow your mind",
            "POV: When {} changes everything",
            "I tried {} and this happened...",
            "The truth about {} they don't want you to know",
            "Wait for it... {} üî•",
            "How {} broke the internet",
            "When {} goes viral"
        ]
        
        # S√©lection d'un mod√®le de titre et remplacement
        title_template = random.choice(title_templates)
        if relevant_words:
            viral_title = title_template.format(random.choice(relevant_words))
        else:
            # Si pas de mots pertinents, simplification du titre
            words = original_title.split(" ")
            if len(words) > 3:
                simple_subject = " ".join(words[:3])
            else:
                simple_subject = original_title if original_title else "this"
            viral_title = title_template.format(simple_subject)
        
        # S√©lection de hashtags pertinents
        # Combiner les hashtags sp√©cifi√©s par l'utilisateur avec des tendances
        user_hashtags = self.config.hashtags
        num_trending = min(8, 15 - len(user_hashtags))  # Maximum ~15 hashtags au total
        
        # Ajouter des hashtags pertinents bas√©s sur les mots-cl√©s d'origine
        relevant_hashtags = []
        for keyword in original_keywords:
            # Transformer le mot-cl√© en hashtag (sans espaces, sans caract√®res sp√©ciaux)
            hashtag = "#" + "".join(c for c in keyword if c.isalnum()).lower()
            if len(hashtag) > 1 and hashtag not in relevant_hashtags:
                relevant_hashtags.append(hashtag)
        
        # Compl√©ter avec des hashtags tendance
        trending_selection = random.sample(self.trending_hashtags, num_trending)
        
        # Compilation des hashtags
        hashtags = [
            *["#" + tag if not tag.startswith("#") else tag for tag in user_hashtags],
            *relevant_hashtags[:5],  # Limiter √† 5 hashtags pertinents max
            *["#" + tag if not tag.startswith("#") else tag for tag in trending_selection]
        ]
        
        # √âlimination des doublons tout en pr√©servant l'ordre
        unique_hashtags = []
        for tag in hashtags:
            if tag not in unique_hashtags:
                unique_hashtags.append(tag)
        
        # G√©n√©ration d'une description engageante
        description_templates = [
            "ü§Ø {title} | Comment if you agree! | {hashtags}",
            "Wait for it... üëÄ | {title} | {hashtags}",
            "You asked for it, here it is! | {title} | {hashtags}",
            "POV: {title} | Drop a ‚ù§Ô∏è if you relate! | {hashtags}",
            "This changed everything! | {title} | {hashtags}",
            "Watch till the end! üî• | {title} | {hashtags}"
        ]
        
        description_template = random.choice(description_templates)
        viral_description = description_template.format(
            title=viral_title,
            hashtags=" ".join(unique_hashtags[:15])  # Limiter √† ~15 hashtags
        )
        
        # Compilation des m√©tadonn√©es
        metadata = {
            "title": viral_title,
            "description": viral_description,
            "hashtags": unique_hashtags,
            "original_info": {
                "title": original_title,
                "keywords": original_keywords
            }
        }
        
        logger.info(f"M√©tadonn√©es g√©n√©r√©es: {viral_title}")
        return metadata
    
    def _extract_relevant_words(self, text: str) -> List[str]:
        """Extrait des mots-cl√©s pertinents d'un texte.
        
        Args:
            text: Texte √† analyser
            
        Returns:
            Liste des mots-cl√©s pertinents
        """
        # Dans une impl√©mentation r√©elle, utiliser NLP pour l'extraction de concepts
        # Simulation simplifi√©e pour l'exemple
        
        # Nettoyage du texte
        clean_text = "".join(c.lower() if c.isalnum() or c.isspace() else " " for c in text)
        words = clean_text.split()
        
        # Filtrage des mots courts et des mots vides
        stopwords = ["the", "and", "a", "to", "of", "in", "is", "it", "you", "that", "was", "for",
                    "on", "are", "with", "as", "this", "be", "at", "by", "an", "not", "we", "i"]
        
        filtered_words = [w for w in words if len(w) > 3 and w not in stopwords]
        
        # Extraction des phrases pertinentes (groupes de 2-3 mots)
        phrases = []
        if len(filtered_words) >= 3:
            for i in range(len(filtered_words) - 2):
                phrase = " ".join(filtered_words[i:i+3])
                if len(phrase) < 30:  # Limite de longueur
                    phrases.append(phrase)
        
        if len(filtered_words) >= 2:
            for i in range(len(filtered_words) - 1):
                phrase = " ".join(filtered_words[i:i+2])
                if len(phrase) < 25:  # Limite de longueur
                    phrases.append(phrase)
        
        # Si pas assez de phrases, utiliser des mots individuels
        if len(phrases) < 5 and filtered_words:
            phrases.extend(filtered_words[:10])
        
        # D√©dupliquer et limiter le nombre
        unique_phrases = list(set(phrases))
        return unique_phrases[:10]  # Retourner max 10 phrases
    
    def _apply_viral_effects(self, input_path: str, metadata: Dict[str, Any]) -> str:
        """Applique des effets viraux √† la vid√©o.
        
        Args:
            input_path: Chemin vers la vid√©o d'entr√©e
            metadata: M√©tadonn√©es g√©n√©r√©es
            
        Returns:
            Chemin vers la vid√©o avec effets
        """
        logger.info(f"Application des effets viraux √† la vid√©o: {input_path}")
        
        # Chemin de sortie pour la vid√©o optimis√©e
        output_path = self.config.get_output_file_path("optimized.mp4")
        
        try:
            # Chargement de la vid√©o avec MoviePy
            video = VideoFileClip(input_path)
            duration = video.duration
            
            # 1. S√©lection al√©atoire d'effets √† appliquer
            # Limiter le nombre d'effets pour ne pas surcharger la vid√©o
            num_effects = min(3, len(self.effect_templates))
            selected_effects = random.sample(self.effect_templates, num_effects)
            
            # 2. Cr√©ation des √©l√©ments d'overlay
            overlays = []
            
            for effect in selected_effects:
                effect_type = effect["type"]
                
                # Effets de texte (overlay)
                if effect_type == "text":
                    # Cr√©ation du clip texte
                    txt_clip = TextClip(
                        effect["text"],
                        fontsize=effect["font_size"],
                        color=effect["color"],
                        stroke_color="black",
                        stroke_width=1,
                        font="Arial-Bold"
                    )
                    
                    txt_clip = txt_clip.set_duration(min(effect["duration"], duration))
                    
                    # Positionnement du texte
                    if effect["position"] == "top":
                        txt_clip = txt_clip.margin(bottom=10, opacity=0).set_position(("center", 0.1))
                    elif effect["position"] == "bottom":
                        txt_clip = txt_clip.margin(top=10, opacity=0).set_position(("center", 0.8))
                    else:  # center
                        txt_clip = txt_clip.set_position("center")
                    
                    overlays.append(txt_clip)
                
                # Effets de zoom
                elif effect_type == "zoom" and effect["start_time"] < duration:
                    # D√©termination de la plage temporelle pour l'effet
                    start_time = effect["start_time"]
                    effect_duration = min(effect["duration"], duration - start_time)
                    end_time = start_time + effect_duration
                    
                    # Cr√©ation d'un sous-clip pour l'effet de zoom
                    if effect_duration > 0:
                        # Application du zoom
                        zoom_factor = effect["zoom_factor"]
                        zoomed_clip = (
                            video.subclip(start_time, end_time)
                            .fx(vfx.resize, zoom_factor)
                            .set_position("center")
                        )
                        
                        # Remplacement du segment original par le segment zoom√©
                        video = video.subclip(0, start_time)
                        video = video.set_duration(duration)
                        overlays.append(zoomed_clip.set_start(start_time))
                
                # Autres effets (flash, shake, etc.)
                # Pour une impl√©mentation compl√®te, ajouter ici
            
            # 3. Composition de la vid√©o finale avec les overlays
            if overlays:
                final_video = CompositeVideoClip([video] + overlays)
            else:
                final_video = video
            
            # 4. Ajout d'un texte avec un hashtag al√©atoire pour renforcer l'identit√©
            if metadata["hashtags"]:
                random_hashtag = random.choice(metadata["hashtags"])
                hashtag_clip = (
                    TextClip(
                        random_hashtag,
                        fontsize=24,
                        color="white",
                        stroke_color="black",
                        stroke_width=1,
                        font="Arial-Bold"
                    )
                    .set_duration(min(5.0, duration))
                    .margin(bottom=10, opacity=0)
                    .set_position(("right", 0.95))
                )
                final_video = CompositeVideoClip([final_video, hashtag_clip])
            
            # 5. √âcriture de la vid√©o finale
            final_video.write_videofile(
                output_path,
                codec="libx264",
                audio_codec="aac",
                ffmpeg_params=["-pix_fmt", "yuv420p"],
                verbose=False,
                logger=None
            )
            
            # Fermeture des clips
            final_video.close()
            video.close()
            for clip in overlays:
                clip.close()
            
            logger.info(f"Effets viraux appliqu√©s: {output_path}")
            return output_path
            
        except Exception as e:
            logger.error(f"Erreur lors de l'application des effets viraux: {str(e)}")
            # En cas d'erreur, on retourne la vid√©o d'entr√©e
            return input_path
    
    def _finalize_optimization(self, video_path: str, metadata: Dict[str, Any]) -> Dict[str, Any]:
        """Finalise l'optimisation et compl√®te les m√©tadonn√©es.
        
        Args:
            video_path: Chemin vers la vid√©o optimis√©e
            metadata: M√©tadonn√©es g√©n√©r√©es
            
        Returns:
            M√©tadonn√©es compl√©t√©es et valid√©es
        """
        logger.info("Finalisation de l'optimisation")
        
        # Extraction des m√©tadonn√©es de la vid√©o optimis√©e
        try:
            probe = ffmpeg.probe(video_path)
            video_stream = next((s for s in probe['streams'] if s['codec_type'] == 'video'), None)
            audio_stream = next((s for s in probe['streams'] if s['codec_type'] == 'audio'), None)
            
            if video_stream:
                # Mise √† jour des m√©tadonn√©es avec les informations techniques
                metadata.update({
                    "video_info": {
                        "width": int(video_stream.get("width", 0)),
                        "height": int(video_stream.get("height", 0)),
                        "duration": float(probe.get("format", {}).get("duration", 0)),
                        "bitrate": int(probe.get("format", {}).get("bit_rate", 0)) // 1000,
                        "codec": video_stream.get("codec_name", ""),
                        "fps": eval(video_stream.get("r_frame_rate", "0/1")),
                        "audio_codec": audio_stream.get("codec_name", "") if audio_stream else None,
                        "audio_bitrate": int(audio_stream.get("bit_rate", 0)) // 1000 if audio_stream else 0
                    },
                    "tiktok_ready": True,
                    "optimization_timestamp": str(pd.Timestamp.now()),
                    "optimized_path": video_path
                })
        except Exception as e:
            logger.error(f"Erreur lors de la finalisation des m√©tadonn√©es: {str(e)}")
            # En cas d'erreur, ajout d'informations minimales
            metadata.update({
                "tiktok_ready": True,
                "optimization_timestamp": str(pd.Timestamp.now()),
                "optimized_path": video_path,
                "error": str(e)
            })
        
        return metadata